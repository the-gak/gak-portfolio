---
// src/pages/resources/[category].astro
import Layout from "../../layouts/main.astro"; // adjust if your layout path differs
import { getCollection } from "astro:content";

export async function getStaticPaths() {
  // get all entries in the resources collection
  const all = await getCollection("resources");

  // derive first-level folder names (category names) from slugs like "dev-tools/awesome-guide"
  const categories = new Set(
    all
      .map((e) => e.slug.split("/")[0])
      .filter(Boolean) // remove empty strings just in case
  );

  return Array.from(categories).map((cat) => ({
    params: { category: cat },
  }));
}

const categorySlug = Astro.params.category;

// fetch all resources again
const allResources = await getCollection("resources");

// try to locate a category metadata file (e.g. src/content/resources/dev-tools/category.md)
// In the content collection the slug for that file becomes: `${categorySlug}/category`
const categoryMetaEntry = allResources.find((e) => e.slug === `${categorySlug}/category`);

// resources in this category: files whose slug starts with `${categorySlug}/` but exclude the category.md itself
let resourcesForCategory = allResources.filter(
  (e) => e.slug.startsWith(`${categorySlug}/`) && !e.slug.endsWith("/category")
);

// normalize and sort by `updated` frontmatter (newest first). If `updated` absent, fallback to 0
resourcesForCategory = resourcesForCategory
  .map((entry) => {
    const updatedVal = entry.data?.updated ?? entry.data?.updated ?? null;
    const parsed = updatedVal ? Date.parse(String(updatedVal)) : 0;
    return { entry, updatedTs: Number.isFinite(parsed) ? parsed : 0 };
  })
  .sort((a, b) => b.updatedTs - a.updatedTs)
  .map((x) => x.entry);

// If the category folder is empty (no resources & no category md), return 404
if (!categoryMetaEntry && resourcesForCategory.length === 0) {
  return {
    status: 404,
    props: {},
  };
}

// human-friendly title for the category
const categoryTitle =
  (categoryMetaEntry && (categoryMetaEntry.data.title || categoryMetaEntry.data.resourceSlug)) ||
  // fallback: capitalize slug part ("dev-tools" -> "Dev-tools")
  (categorySlug ? categorySlug.replace(/(^|-)(\w)/g, (m, p1, p2) => (p1 === "-" ? "-" : "") + p2.toUpperCase()) : categorySlug);

const categoryDescription = categoryMetaEntry?.data?.description ?? null;
---

<Layout title={`${categoryTitle} - Resources | Ahilesh Kumar`} metaDescription={categoryDescription ?? undefined}>
  <section class="max-w-2xl mx-auto my-12 px-7 lg:px-0">
    <header class="mb-6">
      <h1 class="text-3xl font-bold">{categoryTitle}</h1>
      {categoryDescription && <p class="text-neutral-600 mt-2">{categoryDescription}</p>}
    </header>

    <div class="grid gap-5">
      {resourcesForCategory.length === 0 ? (
        <div class="text-sm text-neutral-600">No resources found in this category.</div>
      ) : (
        resourcesForCategory.map((res) => {
          const r = res.data;
          // resource link assumes your per-resource pages live at /resources/[resourceSlug]
          // adjust if your route is different.
          const link = `/resources/${categorySlug}/${r.resourceSlug ?? res.slug.replace(/^\//, "")}`;

          return (
            <div class="relative border border-transparent border-dashed cureser-pointer p-7 group rounded-2xl" role="article"
            onclick={`location.href='${link}'`}>
                <div class="absolute inset-0 z-20 w-full h-full duration-300 ease-out bg-white border border-dashed dark:bg-neutral-950 rounded-2xl border-neutral-300 dark:border-neutral-600 group-hover:-translate-x-1 group-hover:-translate-y-1" />
                <div class="absolute inset-0 z-10 w-full h-full duration-300 ease-out border border-dashed rounded-2xl border-neutral-300 dark:border-neutral-600 group-hover:translate-x-1 group-hover:translate-y-1" />
                <div class="relative z-30 duration-300 ease-out group-hover:-translate-x-1 group-hover:-translate-y-1">
                    <h2 class="flex items-center mb-3">
                        <a
                            href={link}
                            class="text-base font-bold leading-tight tracking-tight sm:text-lg dark:text-neutral-100"
                        >
                            {r.title}
                        </a>
                        <svg
              class="group-hover:translate-x-0 flex-shrink-0 translate-y-0.5 -translate-x-1 w-2.5 h-2.5 stroke-current ml-1 transition-all ease-in-out duration-200  transform"
              viewBox="0 0 13 15"
              version="1.1"
              xmlns="http://www.w3.org/2000/svg"
              xmlns:xlink="http://www.w3.org/1999/xlink"
            >
              <g
                stroke="none"
                stroke-width="1"
                fill="none"
                fill-rule="evenodd"
                stroke-linecap="round"
                stroke-linejoin="round"
              >
                <g
                  id="svg"
                  transform="translate(0.666667, 2.333333)"
                  stroke="currentColor"
                  stroke-width="2.4"
                >
                  <g>
                    <>
                      <polyline
                        class="transition-all duration-200 ease-out opacity-0 delay-0 group-hover:opacity-100"
                        points="5.33333333 0 10.8333333 5.5 5.33333333 11"
                      />
                      <line
                        class="transition-all duration-200 ease-out transform -translate-x-1 opacity-0 group-hover:translate-x-0 group-hover:opacity-100 group-hover:ml-0"
                        x1="10.8333333"
                        y1="5.5"
                        x2="0.833333333"
                        y2="5.16666667"
                      />
                    </>
                  </g>
                </g>
              </g>
            </svg>
            </h2>
            <p class="text-sm text-neutral-600 dark:text-neutral-400">
                <span>{r.description}</span>
            </p>
            <div class="mt-2.5 text-xs font-medium text-neutral-800 dark:text-neutral-300">
            Posted on {r.updated}
          </div>
                </div>
            </div>
          );
        })
      )}
    </div>
  </section>
</Layout>
